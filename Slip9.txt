Sure! Let's design a **simple HR Application** using the **Spring Framework**. We'll make it simple and clear, suitable for learning or exam purposes. This will include:

* **Employee model**
* **Service layer** (business logic)
* **Repository layer** (data storage, simple in-memory)
* **Controller** (for testing via main method, without a web layer)
* **Spring Dependency Injection**

---

### 1Ô∏è‚É£ Project Structure (Simple)

```
src/
 ‚îî‚îÄ com.example.hr/
      ‚îú‚îÄ config/
      ‚îÇ     ‚îî‚îÄ AppConfig.java
      ‚îú‚îÄ model/
      ‚îÇ     ‚îî‚îÄ Employee.java
      ‚îú‚îÄ repository/
      ‚îÇ     ‚îî‚îÄ EmployeeRepository.java
      ‚îú‚îÄ service/
      ‚îÇ     ‚îî‚îÄ EmployeeService.java
      ‚îî‚îÄ MainApp.java
```

---

### 2Ô∏è‚É£ Employee Model

```java
package com.example.hr.model;

public class Employee {
    private int id;
    private String name;
    private String department;

    public Employee() {}

    public Employee(int id, String name, String department) {
        this.id = id;
        this.name = name;
        this.department = department;
    }

    // Getters and setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getDepartment() { return department; }
    public void setDepartment(String department) { this.department = department; }

    @Override
    public String toString() {
        return "Employee{id=" + id + ", name='" + name + '\'' + ", department='" + department + '\'' + '}';
    }
}
```

---

### 3Ô∏è‚É£ Repository Layer (In-Memory Storage)

```java
package com.example.hr.repository;

import com.example.hr.model.Employee;
import java.util.*;

import org.springframework.stereotype.Repository;

@Repository
public class EmployeeRepository {
    private final Map<Integer, Employee> employeeMap = new HashMap<>();

    public void addEmployee(Employee e) {
        employeeMap.put(e.getId(), e);
    }

    public Employee getEmployee(int id) {
        return employeeMap.get(id);
    }

    public List<Employee> getAllEmployees() {
        return new ArrayList<>(employeeMap.values());
    }

    public void removeEmployee(int id) {
        employeeMap.remove(id);
    }
}
```

---

### 4Ô∏è‚É£ Service Layer

```java
package com.example.hr.service;

import com.example.hr.model.Employee;
import com.example.hr.repository.EmployeeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class EmployeeService {
    @Autowired
    private EmployeeRepository repository;

    public void addEmployee(Employee e) { repository.addEmployee(e); }

    public Employee getEmployee(int id) { return repository.getEmployee(id); }

    public List<Employee> getAllEmployees() { return repository.getAllEmployees(); }

    public void removeEmployee(int id) { repository.removeEmployee(id); }
}
```

---

### 5Ô∏è‚É£ Spring Configuration

```java
package com.example.hr.config;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackages = "com.example.hr")
public class AppConfig {}
```

---

### 6Ô∏è‚É£ Main Application (Testing)

```java
package com.example.hr;

import com.example.hr.config.AppConfig;
import com.example.hr.model.Employee;
import com.example.hr.service.EmployeeService;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class MainApp {
    public static void main(String[] args) {
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);

        EmployeeService service = context.getBean(EmployeeService.class);

        // Add employees
        service.addEmployee(new Employee(1, "Alice", "IT"));
        service.addEmployee(new Employee(2, "Bob", "HR"));
        service.addEmployee(new Employee(3, "Charlie", "Finance"));

        // Display all employees
        System.out.println("All Employees:");
        service.getAllEmployees().forEach(System.out::println);

        // Get specific employee
        System.out.println("Employee with ID 2: " + service.getEmployee(2));

        // Remove an employee
        service.removeEmployee(1);
        System.out.println("After removing Employee 1:");
        service.getAllEmployees().forEach(System.out::println);

        context.close();
    }
}
```

---

### ‚úÖ Sample Output

```
All Employees:
Employee{id=1, name='Alice', department='IT'}
Employee{id=2, name='Bob', department='HR'}
Employee{id=3, name='Charlie', department='Finance'}
Employee with ID 2: Employee{id=2, name='Bob', department='HR'}
After removing Employee 1:
Employee{id=2, name='Bob', department='HR'}
Employee{id=3, name='Charlie', department='Finance'}
```

---

### üìå Notes

1. **Spring annotations used**:

   * `@ComponentScan` ‚Üí to scan all components
   * `@Configuration` ‚Üí configuration class
   * `@Repository` ‚Üí repository bean
   * `@Service` ‚Üí service bean
   * `@Autowired` ‚Üí dependency injection

2. **In-memory storage** is used for simplicity. You can replace it with a database later.

3. **Class name for file creation**:

   * Main file ‚Üí `MainApp.java`

---


// Slip 17
//Give File Name as :- AbstractFactoryDemo.java
// Slip 17
// Write a Java Program to implement Abstract Factory Pattern for Shape interface. 

interface Shape { void draw(); }

class Circle implements Shape { public void draw(){System.out.println("Drawing Circle");} }
class Square implements Shape { public void draw(){System.out.println("Drawing Square");} }
class Rectangle implements Shape { public void draw(){System.out.println("Drawing Rectangle");} }

interface AbstractFactory { Shape createShape(String type); }

class ShapeFactory implements AbstractFactory
 {
    public Shape createShape(String type){
        return switch(type.toUpperCase()){
            case "CIRCLE" -> new Circle();
            case "SQUARE" -> new Square();
            case "RECTANGLE" -> new Rectangle();
            default -> null;
        };
    }
}

class FactoryProducer {
     static AbstractFactory getFactory()
     { 
        return new ShapeFactory(); 
    } 
     }

public class AbstractFactoryDemo {
    public static void main(String[] args){
        AbstractFactory f = FactoryProducer.getFactory();
        f.createShape("CIRCLE").draw();
        f.createShape("SQUARE").draw();
        f.createShape("RECTANGLE").draw();
    }
}


// Output:-
// Drawing a Circle
// Drawing a Square
// Drawing a Rectangle
